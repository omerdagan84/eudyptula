From e9f89e5aba1594363fa51c0ec24222f15fa3dbc7 Mon Sep 17 00:00:00 2001
From: Ramon Fried <ramon.fried@gmail.com>
Date: Mon, 25 Apr 2016 14:57:14 +0300
Subject: [PATCH 2/5] task8 - create directory and id file

---
 task8/task8.c | 65 +++++++++++++++++++++++++++++++++++------------------------
 1 file changed, 39 insertions(+), 26 deletions(-)

diff --git a/task8/task8.c b/task8/task8.c
index 0ded83b..125c570 100644
--- a/task8/task8.c
+++ b/task8/task8.c
@@ -1,10 +1,16 @@
 /*
- *   task6.c - Task 6 eudyptula.
+ *   task6.c - Task 8 eudyptula.
  *   create a loadable kernel module and makefile
- *   module will open a misc device /dev/eudyptula
+ *   implement 'debugfs entries'
+ *   1. create subdirectory 'eudyptula'
+ *   2. create a file called 'id' mode 666 - same as task6
+ *   3. add a file called 'jiffies'mode 444 - read return kernel jiffies
+ *   4. add a file 'foo' mode 644 - write data upto a PAGE size, 
+ *			read return the value
+ *
  *
  *		Author: Omer Dagan
- *		Date: 21.4.16
+ *		Date: 25.4.16
  *		mail: omer.dagan@tandemg.com
  *		based on: http://linux.die.net/lkmpg/x121.html
 */
@@ -14,10 +20,13 @@
 #include <linux/miscdevice.h>
 #include <linux/uaccess.h>
 #include <linux/fs.h>
+#include <linux/debugfs.h>
 
 #define MAX_INPUT_SIZE 20
+static struct dentry *debug_dir = NULL;
+static struct dentry *debug_id = NULL;
 
-static ssize_t task6_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
+static ssize_t task8_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 {
 
 	char ret_string[] = "eudyptula\n";
@@ -34,7 +43,7 @@ static ssize_t task6_read(struct file *file, char __user *buf, size_t count, lof
 	return *ppos;
 }
 
-static ssize_t task6_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
+static ssize_t task8_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 {
 	char input[MAX_INPUT_SIZE];
 	int ret;
@@ -53,33 +62,37 @@ static ssize_t task6_write(struct file *file, const char __user *buf, size_t cou
 	return count + 1;
 
 }
-static const struct file_operations task6_fops = {
+static const struct file_operations task8_fops = {
 	.owner	= THIS_MODULE,
-	.read	= task6_read,
-	.write	= task6_write,
-};
-static struct miscdevice eudyptula_dev = {
-	MISC_DYNAMIC_MINOR,
-	"eudyptula",
-	&task6_fops
+	.read	= task8_read,
+	.write	= task8_write,
 };
-static int __init task6_init(void)
+
+static int __init task8_init(void)
 {
-	int ret;
+	/*create the debugfs directory*/
+	debug_dir = debugfs_create_dir("eudyptula",NULL);
+	if (!debug_dir) {
+		pr_info("could not create dir - exiting...");
+		return -ENODEV;
+	}
 
-	ret = misc_register(&eudyptula_dev);
-	if (ret)
-		pr_debug("Unable to register eudyptula misc device\n");
-	else
-		pr_debug("Registered eudyptula misc device\n");
-	return ret;
+	debug_id = debugfs_create_file("id", 0666, debug_dir, NULL, &task8_fops);
+	if (!debug_id)
+		goto cleanup_debugfs;
+
+	pr_info("initialising task8 module - success");
+	return 0;
+cleanup_debugfs:
+	return -EINVAL;
 }
 
-static void __exit task6_exit(void)
+static void __exit task8_exit(void)
 {
-	pr_debug("De-registered eudyptula misc device\n");
-	misc_deregister(&eudyptula_dev);
+	pr_debug("De-registered eudyptula debugfs module\n");
+	debugfs_remove_recursive(debug_dir);
 }
 
-module_init(task6_init);
-module_exit(task6_exit);
+MODULE_LICENSE("GPL"); /*cannot load debugfs without this*/
+module_init(task8_init);
+module_exit(task8_exit);
-- 
2.5.0

