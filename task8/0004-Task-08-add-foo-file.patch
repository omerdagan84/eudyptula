From a95230cbddc12bf67e61f7cd2545b083add6b2f3 Mon Sep 17 00:00:00 2001
From: Ramon Fried <ramon.fried@gmail.com>
Date: Mon, 25 Apr 2016 16:29:40 +0300
Subject: [PATCH 4/5] Task 08: add foo file

---
 task8/task8.c | 66 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 61 insertions(+), 5 deletions(-)

diff --git a/task8/task8.c b/task8/task8.c
index f1d323c..cfdf0fb 100644
--- a/task8/task8.c
+++ b/task8/task8.c
@@ -22,10 +22,55 @@
 #include <linux/fs.h>
 #include <linux/debugfs.h>
 #include <linux/jiffies.h>
+#include <linux/spinlock.h>
+#include <linux/slab.h>
 
 #define MAX_INPUT_SIZE 20
 static struct dentry *debug_dir = NULL;
-static struct dentry *debug_id = NULL;
+static spinlock_t fops_lock;
+static char *foo_data;
+
+static ssize_t foo_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
+{
+	spin_lock(&fops_lock);
+	if (*ppos == strlen(foo_data)) {
+		spin_unlock(&fops_lock);
+		return 0;
+	}
+	else
+		if (*ppos != 0 || count < strlen(foo_data))
+			goto err;
+
+	if (copy_to_user(buf, foo_data, strlen(foo_data)))
+		goto err;
+
+	*ppos = strlen(foo_data);
+	spin_unlock(&fops_lock);
+	return *ppos;
+err:
+	spin_unlock(&fops_lock);
+	return -EINVAL;
+}
+
+static ssize_t foo_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
+{
+	int ret;
+
+	spin_lock(&fops_lock);
+	if (count > PAGE_SIZE)
+		return -EINVAL;
+	ret = copy_from_user(foo_data, buf, count);
+	pr_info("copied from the user %s count=%lu", foo_data, count);
+
+	spin_unlock(&fops_lock);
+	return count;
+
+}
+static const struct file_operations foo_fops = {
+	.owner	= THIS_MODULE,
+	.read	= foo_read,
+	.write	= foo_write,
+};
 
 static ssize_t task8_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 {
@@ -89,6 +134,7 @@ static ssize_t jiffies_read(struct file *file, char __user *buf, size_t count, l
 	*ppos = str_size;
 	return *ppos;
 }
+
 static const struct file_operations jiffies_fops = {
 	.owner	= THIS_MODULE,
 	.read	= jiffies_read,
@@ -97,6 +143,8 @@ static const struct file_operations jiffies_fops = {
 
 static int __init task8_init(void)
 {
+	struct dentry *debug_entry = NULL;
+
 	/*create the debugfs directory*/
 	debug_dir = debugfs_create_dir("kerneltask",NULL);
 	if (!debug_dir) {
@@ -104,14 +152,21 @@ static int __init task8_init(void)
 		return -ENODEV;
 	}
 
-	debug_id = debugfs_create_file("id", 0666, debug_dir, NULL, &task8_fops);
-	if (!debug_id)
+	debug_entry = debugfs_create_file("id", 0666, debug_dir, NULL, &task8_fops);
+	if (!debug_entry)
 		goto cleanup_debugfs;
 	
-	debug_id = debugfs_create_file("jiffies", 0444, debug_dir, NULL, &jiffies_fops);
-	if (!debug_id)
+	debug_entry = debugfs_create_file("jiffies", 0444, debug_dir, NULL, &jiffies_fops);
+	if (!debug_entry)
 		goto cleanup_debugfs;
 
+	spin_lock_init(&fops_lock);
+	foo_data = (char *)kmalloc(PAGE_SIZE, GFP_KERNEL);
+
+	debug_entry = debugfs_create_file("foo", 0644, debug_dir, NULL, &foo_fops);
+	if (!debug_entry)
+		goto cleanup_debugfs;
+	
 	pr_info("initialising task8 module - success");
 	return 0;
 cleanup_debugfs:
@@ -121,6 +176,7 @@ cleanup_debugfs:
 static void __exit task8_exit(void)
 {
 	pr_debug("De-registered kerneltask debugfs module\n");
+	kfree(foo_data);
 	debugfs_remove_recursive(debug_dir);
 }
 
-- 
2.5.0

